// Import the Mongoose library, which provides an interface for interacting with MongoDB databases
// in an object-oriented manner (Object Data Modeling - ODM).
const mongoose = require("mongoose");

/**
 * Defines the schema for the 'Question' model.
 * This schema specifies the structure of documents that will be stored in the 'questions' collection in MongoDB.
 * Each document represents a single question in the polling system.
 */
const questionSchema = new mongoose.Schema({
  // The main text or title of the question (e.g., "What is your favorite color?").
  title: {
    type: String, // Specifies the data type for the title field as String.
    required: true, // Makes this field mandatory. Every question document must have a title.
  },
  // An array field to store references to the options associated with this question.
  // This creates a one-to-many relationship between a Question and its Options.
  options: [
    {
      // Defines 'options' as an array.
      type: mongoose.Schema.Types.ObjectId, // Specifies that each element in the array will be a MongoDB ObjectId.
      // ObjectIds are unique identifiers automatically generated by MongoDB.
      ref: "Option", // Establishes a reference to the 'Option' model. This tells Mongoose that the ObjectIds stored
      // in this array correspond to documents in the collection associated with the 'Option' model.
      // This reference is essential for using Mongoose's `populate()` method to easily fetch
      // the related Option documents along with the Question document.
    },
  ],
  // Mongoose automatically adds an _id field of type ObjectId.
  // Timestamps (createdAt, updatedAt) can be added by passing { timestamps: true } as a second argument to mongoose.Schema if needed.
});

/**
 * Creates the Mongoose model named 'Question' based on the 'questionSchema'.
 * A Mongoose model provides an interface for creating, querying, updating, and deleting documents
 * in the MongoDB collection associated with the model.
 * Mongoose will typically interact with a collection named 'questions' (pluralized, lowercase version of the model name)
 * in the MongoDB database.
 * @param {string} "Question" - The singular name of the model.
 * @param {mongoose.Schema} questionSchema - The schema definition for the model.
 */
const Question = mongoose.model("Question", questionSchema);

// Export the 'Question' model so it can be imported and utilized in other modules of the application,
// such as route handlers (controllers) that need to interact with question data in the database.
module.exports = Question;
